<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System.Data" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Web" #>
<#@ import namespace="MySqlSugar" #>
<#@ assembly name="System.Runtime" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ assembly name="$(SolutionDir)\ZC.Platform.Model\App_Lib\Newtonsoft.Json.dll" #>
<#@ assembly name="$(SolutionDir)\ZC.Platform.Model\App_Lib\MySqlSugar.dll" #>


<# 
     
    //当前项目目录
    string projectDir = Host.ResolveAssemblyReference("$(ProjectDir)");

    //解决方案目录
    string solutionDir = Host.ResolveAssemblyReference("$(SolutionDir)");
	//配置文件路径
	
	//删除 '\'
	int lastIndex = projectDir.LastIndexOf('\\');
    string apiPath = projectDir.Remove(lastIndex);
    int last2Index = apiPath.LastIndexOf('\\') + 1;
    apiPath = apiPath.Remove(last2Index, apiPath.Length - last2Index);

	//获取appsettings.json路径
    string path = apiPath + "\\ZC.Platform.API\\appsettings.json";

    //获取Json报文  
	string json = string.Empty;
	using (FileStream fs = new FileStream(path, FileMode.Open, System.IO.FileAccess.Read, FileShare.ReadWrite))
	{
		using (StreamReader sr = new StreamReader(fs, Encoding.GetEncoding("utf-8")))
		{
			json = sr.ReadToEnd().ToString();
		}
	}
			 
        //利用json获取连接字符串路径
        JObject ad = JObject.Parse(json);
        string ConnectionString = ad["ConnectionStrings"]["DefaultConnection"].ToString();

        using (var db = new SqlSugarClient(ConnectionString))
        {
            //生成到ZC.Platform.Model层之下
            string modelPath = apiPath  + "\\ZC.Platform.Model";

			string baseModelPath = apiPath + "\\ZC.Platform.API\\BaseModel";

			 //删除baseModel模板
			DeleteAllCS(baseModelPath);
            //编写新模板
            db.ClassGenerating.ForeachTables(db, tableName =>
            {
                // string model = $"{modelPath}\\{tableName}.cs";
                db.AddMappingTable(new KeyValue() { Key = tableName.ToUpper(), Value = tableName });

				//获取生成BaseModel模板
                var tableModelTemplate = NewKey(db.ClassGenerating.TableNameToClass(db, tableName.ToUpper()), tableName.ToUpper(), false)
                .Replace('~', '_').Replace("namespace System", "namespace ZC.Platform.API.BaseModel");

                while (tableName.IndexOf('_') != -1)
                {
                    tableName = tableName.Remove(tableName.IndexOf('_'), 1);
                }
                tableName += "Base";
                //去T
                tableName = tableName.Substring(1,tableName.Length-1);
                CreateFile(baseModelPath.TrimEnd('\\') + "\\" + tableName.ToUpper() + ".cs", tableModelTemplate, Encoding.UTF8);

            });
            //删除所有.cs文件 
			DirectoryInfo folder = new DirectoryInfo(modelPath);
			//获取文件夹下所有的文件
			FileInfo[] fileList = folder.GetFiles();
			foreach (FileInfo file in fileList)
			{
				//判断文件的扩展名是否为 .gif
				if (file.Extension == ".cs")
				{
					file.Delete();  // 删除
				}
			}
            //建立全部
            db.ClassGenerating.CreateClassFiles(db, modelPath, "ZC.Platform.Model");
			}
#>

<#
        /// <summary>
        /// 创建一个文件,并将字符串写入文件。
        /// </summary>
        /// <param name="filePath">文件的绝对路径</param>
        /// <param name="text">字符串数据</param>
        /// <param name="encoding">字符编码</param>
         void CreateFile(string filePath, string text, Encoding encoding)
        {
            try
            {
                //如果文件不存在则创建该文件
                if (!IsExistFile(filePath))
                {
                    //获取文件目录路径
                    string directoryPath = GetDirectoryFromFilePath(filePath);

                    //如果文件的目录不存在，则创建目录
                    CreateDirectory(directoryPath);

                    //创建文件
                    FileInfo file = new FileInfo(filePath);
                    using (FileStream stream = file.Create())
                    {
                        using (StreamWriter writer = new StreamWriter(stream, encoding))
                        {
                            //写入字符串     
                            writer.Write(text);

                            //输出
                            writer.Flush();
                        }
                    }
                }
            }
            catch
            {
            }
        }

        /// <summary>
        /// 从文件绝对路径中获取目录路径
        /// </summary>
        /// <param name="filePath">文件的绝对路径</param>
        string GetDirectoryFromFilePath(string filePath)
        {
            //实例化文件
            FileInfo file = new FileInfo(filePath);

            //获取目录信息
            DirectoryInfo directory = file.Directory;

            //返回目录路径
            return directory.FullName;
        }

        /// <summary>
        /// 创建一个目录
        /// </summary>
        /// <param name="directoryPath">目录的绝对路径</param>
       void CreateDirectory(string directoryPath)
        {
            //如果目录不存在则创建该目录
            if (!IsExistDirectory(directoryPath))
            {
                Directory.CreateDirectory(directoryPath);
            }
        }

        #region 检测指定文件是否存在
        /// <summary>
        /// 检测指定文件是否存在,如果存在则返回true。
        /// </summary>
        /// <param name="filePath">文件的绝对路径</param>        
        bool IsExistFile(string filePath)
        {
            return File.Exists(filePath);
        }
        #endregion

		 bool IsExistDirectory(string directoryPath)
        {
            return Directory.Exists(directoryPath);
        }

		        /// <summary>
        /// 获取驼峰式的命名
        /// </summary>
        /// <param name="key"></param>
        /// <returns></returns>
        string NewKey(string key, string tableName, bool isSkip)
        {
            int index = key.IndexOf('_');
            if (index != -1)
            {
                //重命名表名
                string tConvert = key[index - 1].ToString();
                string nullMark = key[index - 2].ToString();
                if (!(tConvert == "T" && nullMark == " "))
                {
                    string ch = key[index + 1].ToString().ToUpper();

                    key = key.Remove(index, 2);
                    key = key.Insert(index, ch);

                    while (key.IndexOf('_') != -1)
                    {
                        key = NewKey(key, tableName, isSkip);
                    }
                }
                else
                {
                    if (!isSkip)
                    {
                        //确认该T是属于table的
                        int headIndex = key.IndexOf('{');
                        int endIndex = key.IndexOf('{', headIndex + 1);

                        //public class T_USERS_Mark -> public class Users_Mark
                        key = key.Remove(index - 1, 2);
                        //从T开始 到
                        int endTableNameIndex = key.IndexOf(' ', index);
                        key = key.Insert(endTableNameIndex - 2, "BASE");

                        //由于T_USERS的下滑先会被替换 所以寻找一个不会被替换的字符代替 '~'
                        tableName = tableName.Replace('_', '~');

                        //添加头部表格映射 [SugarMapping(TableName = "T_TASK")]
                        string sugarAttr = $"\n    [SugarMapping(TableName = \"{tableName.ToUpper()}\")]";
                        key = key = key.Insert(headIndex + 1, sugarAttr);

                        //添加引用
                        key = key.Insert(0, "using MySqlSugar;\n");
                        //完成任务不进来了
                        isSkip = true;
                    }


                    //处理完标题继续循环
                    while (key.IndexOf('_') != -1)
                    {
                        key = NewKey(key, tableName, isSkip);
                    }
                }
            }

            return key;
        }
		        /// <summary>
        /// 删除所有的.cs文件
        /// </summary>
        /// <param name="filePath"></param>
        void DeleteAllCS(string filePath)
        {
            DirectoryInfo folder = new DirectoryInfo(filePath);
            //获取文件夹下所有的文件
            FileInfo[] fileList = folder.GetFiles();
            foreach (FileInfo file in fileList)
            {
                //判断文件的扩展名是否为 .gif
                if (file.Extension == ".cs")
                {
                    file.Delete();  // 删除
                }
            }
        }
#>
